@page "/addinventory"

@attribute [Authorize]

@inject IAddInventoryUseCase AddInventoryUseCase
@inject NavigationManager NavigationManager

<h3>Add Inventory</h3>
<br/>
@if (inventory != null)
{
    <EditForm Model="inventory" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        <div class="form-group">
            <lable for="name">Inventory Name</lable>
            <InputText style="width: 600px" id="name" @bind-Value="inventory.InventoryName" class="form-control"></InputText>
        </div>

        <div class="form-group">
            <lable for="qty">Quantity</lable>
            <InputNumber style="width: 600px" id="qty" @bind-Value="inventory.Quantity" class="form-control"></InputNumber>
        </div>

        <div class="form-group">
            <lable for="price">Price</lable>
            <InputNumber style="width: 600px" id="price" @bind-Value="inventory.Price" class="form-control"></InputNumber>
        </div>
       
        <br/>
            <InputRadioGroup @bind-Value="@inventory.Size">
                Sample Size:
                <br/>
                @foreach (var size in Sizes)
                {
                    <InputRadio style="width:50px" Value="size"/>
                    @size
                    <br/>
                }
            </InputRadioGroup>
        <br/>
            <InputRadioGroup @bind-Value="@inventory.Type">
                    Sample Type:
                    <br/>
                    @foreach (var type in Types)
                    {
                        <InputRadio style="width:50px" Value="type"/>
                        @type
                        <br/>
                    }
            </InputRadioGroup>
        <br/>

        <button type="submit" class="btn btn-primary">Save</button>
    </EditForm>
}

@code {
    private Inventory? inventory;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        inventory = new Inventory();
    }

    private async Task OnValidSubmit()
    {
        if (this.inventory != null)
        {
            await AddInventoryUseCase.ExecuteAsync(this.inventory);
            NavigationManager.NavigateTo("/inventories");
        }
    }

    List<string> Sizes = new List<string> 
    { 
        "Letter", 
        "Swatch", 
        "14 x 17\"" 
    };

    List<string> Types = new List<string>
    {
        "MDF",
        "Particle Board",
        "HPL",
        "S-HPL",
        "PeelStix",
        "Natura Stone",
        "Accent Plank"
    };

}
